From ae85096e6f416aff3239dc5ec1fc2c3323883cab Mon Sep 17 00:00:00 2001
From: liguang <guang.li@godinsec.com>
Date: Wed, 24 Jun 2015 16:03:40 +0800
Subject: [PATCH 7/8] use devns for binder

Signed-off-by: liguang <guang.li@godinsec.com>
---
 drivers/staging/android/binder.c | 229 +++++++++++++++++++++++++++++----------
 1 file changed, 170 insertions(+), 59 deletions(-)

diff --git a/drivers/staging/android/binder.c b/drivers/staging/android/binder.c
index 2e4f44f..12004aa 100644
--- a/drivers/staging/android/binder.c
+++ b/drivers/staging/android/binder.c
@@ -35,6 +35,7 @@
 #include <linux/vmalloc.h>
 #include <linux/slab.h>
 #include <linux/security.h>
+#include <linux/dev_namespace.h>
 
 #include "binder.h"
 
@@ -42,17 +43,66 @@ static DEFINE_MUTEX(binder_lock);
 static DEFINE_MUTEX(binder_deferred_lock);
 static DEFINE_MUTEX(binder_mmap_lock);
 
-static HLIST_HEAD(binder_procs);
+//static HLIST_HEAD(binder_procs);
 static HLIST_HEAD(binder_deferred_list);
-static HLIST_HEAD(binder_dead_nodes);
+//static HLIST_HEAD(binder_dead_nodes);
 
 static struct dentry *binder_debugfs_dir_entry_root;
 static struct dentry *binder_debugfs_dir_entry_proc;
-static struct binder_node *binder_context_mgr_node;
-static uid_t binder_context_mgr_uid = -1;
-static int binder_last_id;
+//static struct binder_node *binder_context_mgr_node;
+//static uid_t binder_context_mgr_uid = -1;
+//static int binder_last_id;
 static struct workqueue_struct *binder_deferred_workqueue;
 
+struct binder_dev_ns {
+	struct binder_node	*context_mgr_node;
+	uid_t			context_mgr_uid;
+	int			last_id;
+
+	struct hlist_head	procs;
+	struct hlist_head	dead_nodes;
+
+	struct dev_ns_info	dev_ns_info;
+};
+
+static void binder_ns_initialize(struct binder_dev_ns *binder_ns)
+{
+	INIT_HLIST_HEAD(&binder_ns->procs);
+	INIT_HLIST_HEAD(&binder_ns->dead_nodes);
+
+	binder_ns->context_mgr_uid = -1;
+}
+
+/* binder_ns_id, get_binder_ns(), get_binder_ns_cur(), put_binder_ns() */
+DEFINE_DEV_NS_INFO(binder)
+
+static struct dev_ns_info *binder_ns_create(struct dev_namespace *dev_ns)
+{
+	struct binder_dev_ns *binder_ns;
+
+	binder_ns = kzalloc(sizeof(*binder_ns), GFP_KERNEL);
+	if (!binder_ns)
+		return ERR_PTR(-ENOMEM);
+
+	binder_ns_initialize(binder_ns);
+
+	return &binder_ns->dev_ns_info;
+}
+
+static void binder_ns_release(struct dev_ns_info *dev_ns_info)
+{
+	struct binder_dev_ns *binder_ns;
+
+	binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+				 dev_ns_info);
+	kfree(binder_ns);
+}
+
+static struct dev_ns_ops binder_ns_ops = {
+	.create = binder_ns_create,
+	.release = binder_ns_release,
+};
+
 #define BINDER_DEBUG_ENTRY(name) \
 static int binder_##name##_open(struct inode *inode, struct file *file) \
 { \
@@ -298,6 +348,8 @@ struct binder_proc {
 	void *buffer;
 	ptrdiff_t user_buffer_offset;
 
+        struct binder_dev_ns *binder_ns;
+
 	struct list_head buffers;
 	struct rb_root free_buffers;
 	struct rb_root allocated_buffers;
@@ -982,7 +1034,7 @@ static struct binder_node *binder_new_node(struct binder_proc *proc,
 	binder_stats_created(BINDER_STAT_NODE);
 	rb_link_node(&node->rb_node, parent, p);
 	rb_insert_color(&node->rb_node, &proc->nodes);
-	node->debug_id = ++binder_last_id;
+	node->debug_id = ++proc->binder_ns->last_id;
 	node->proc = proc;
 	node->ptr = ptr;
 	node->cookie = cookie;
@@ -1003,7 +1055,7 @@ static int binder_inc_node(struct binder_node *node, int strong, int internal,
 		if (internal) {
 			if (target_list == NULL &&
 			    node->internal_strong_refs == 0 &&
-			    !(node == binder_context_mgr_node &&
+			    !(node == node->proc->binder_ns->context_mgr_node &&
 			    node->has_strong_ref)) {
 				binder_debug(BINDER_DEBUG_TOP_ERRORS,
 					     "binder: invalid inc strong "
@@ -1119,13 +1171,13 @@ static struct binder_ref *binder_get_ref_for_node(struct binder_proc *proc,
 	if (new_ref == NULL)
 		return NULL;
 	binder_stats_created(BINDER_STAT_REF);
-	new_ref->debug_id = ++binder_last_id;
+	new_ref->debug_id = ++proc->binder_ns->last_id;
 	new_ref->proc = proc;
 	new_ref->node = node;
 	rb_link_node(&new_ref->rb_node_node, parent, p);
 	rb_insert_color(&new_ref->rb_node_node, &proc->refs_by_node);
 
-	new_ref->desc = (node == binder_context_mgr_node) ? 0 : 1;
+	new_ref->desc = (node == proc->binder_ns->context_mgr_node) ? 0 : 1;
 	for (n = rb_first(&proc->refs_by_desc); n != NULL; n = rb_next(n)) {
 		ref = rb_entry(n, struct binder_ref, rb_node_desc);
 		if (ref->desc > new_ref->desc)
@@ -1478,7 +1530,7 @@ static void binder_transaction(struct binder_proc *proc,
 			}
 			target_node = ref->node;
 		} else {
-			target_node = binder_context_mgr_node;
+			target_node = proc->binder_ns->context_mgr_node;
 			if (target_node == NULL) {
 				return_error = BR_DEAD_REPLY;
 				goto err_no_context_mgr_node;
@@ -1540,7 +1592,7 @@ static void binder_transaction(struct binder_proc *proc,
 	}
 	binder_stats_created(BINDER_STAT_TRANSACTION_COMPLETE);
 
-	t->debug_id = ++binder_last_id;
+	t->debug_id = ++proc->binder_ns->last_id;
 	e->debug_id = t->debug_id;
 
 	if (reply)
@@ -1851,10 +1903,10 @@ int binder_thread_write(struct binder_proc *proc, struct binder_thread *thread,
 			if (get_user(target, (uint32_t __user *)ptr))
 				return -EFAULT;
 			ptr += sizeof(uint32_t);
-			if (target == 0 && binder_context_mgr_node &&
+			if (target == 0 && proc->binder_ns->context_mgr_node &&
 			    (cmd == BC_INCREFS || cmd == BC_ACQUIRE)) {
 				ref = binder_get_ref_for_node(proc,
-					       binder_context_mgr_node);
+					       proc->binder_ns->context_mgr_node);
 				if (ref->desc != target) {
 					binder_user_error("binder: %d:"
 						"%d tried to acquire "
@@ -2761,7 +2813,7 @@ static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 		}
 		break;
 	case BINDER_SET_CONTEXT_MGR:
-		if (binder_context_mgr_node != NULL) {
+		if (proc->binder_ns->context_mgr_node != NULL) {
 			binder_debug(BINDER_DEBUG_TOP_ERRORS,
 				     "binder: BINDER_SET_CONTEXT_MGR already set\n");
 			ret = -EBUSY;
@@ -2770,27 +2822,27 @@ static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 		ret = security_binder_set_context_mgr(proc->tsk);
 		if (ret < 0)
 			goto err;
-		if (binder_context_mgr_uid != -1) {
-			if (binder_context_mgr_uid != current->cred->euid) {
+		if (proc->binder_ns->context_mgr_uid != -1) {
+			if (proc->binder_ns->context_mgr_uid != current->cred->euid) {
 				binder_debug(BINDER_DEBUG_TOP_ERRORS,
 					     "binder: BINDER_SET_"
 					     "CONTEXT_MGR bad uid %d != %d\n",
 					     current->cred->euid,
-					     binder_context_mgr_uid);
+					     proc->binder_ns->context_mgr_uid);
 				ret = -EPERM;
 				goto err;
 			}
 		} else
-			binder_context_mgr_uid = current->cred->euid;
-		binder_context_mgr_node = binder_new_node(proc, NULL, NULL);
-		if (binder_context_mgr_node == NULL) {
+			proc->binder_ns->context_mgr_uid = current->cred->euid;
+		proc->binder_ns->context_mgr_node = binder_new_node(proc, NULL, NULL);
+		if (proc->binder_ns->context_mgr_node == NULL) {
 			ret = -ENOMEM;
 			goto err;
 		}
-		binder_context_mgr_node->local_weak_refs++;
-		binder_context_mgr_node->local_strong_refs++;
-		binder_context_mgr_node->has_strong_ref = 1;
-		binder_context_mgr_node->has_weak_ref = 1;
+		proc->binder_ns->context_mgr_node->local_weak_refs++;
+		proc->binder_ns->context_mgr_node->local_strong_refs++;
+		proc->binder_ns->context_mgr_node->has_strong_ref = 1;
+		proc->binder_ns->context_mgr_node->has_weak_ref = 1;
 		break;
 	case BINDER_THREAD_EXIT:
 		binder_debug(BINDER_DEBUG_THREADS, "binder: %d:%d exit\n",
@@ -2955,13 +3007,21 @@ err_bad_arg:
 static int binder_open(struct inode *nodp, struct file *filp)
 {
 	struct binder_proc *proc;
+        struct binder_dev_ns *binder_ns;
+
+        binder_ns = get_binder_ns_cur();
+        if (!binder_ns)
+                return -ENOMEM;
 
 	binder_debug(BINDER_DEBUG_OPEN_CLOSE, "binder_open: %d:%d\n",
 		     current->group_leader->pid, current->pid);
 
 	proc = kzalloc(sizeof(*proc), GFP_KERNEL);
-	if (proc == NULL)
+	if (proc == NULL) {
+                put_binder_ns(binder_ns);
 		return -ENOMEM;
+        }
+        proc->binder_ns = binder_ns;
 	get_task_struct(current);
 	proc->tsk = current;
 	INIT_LIST_HEAD(&proc->todo);
@@ -2969,7 +3029,7 @@ static int binder_open(struct inode *nodp, struct file *filp)
 	proc->default_priority = task_nice(current);
 	mutex_lock(&binder_lock);
 	binder_stats_created(BINDER_STAT_PROC);
-	hlist_add_head(&proc->proc_node, &binder_procs);
+        hlist_add_head(&proc->proc_node, &binder_ns->procs);
 	proc->pid = current->group_leader->pid;
 	INIT_LIST_HEAD(&proc->delivered_death);
 	filp->private_data = proc;
@@ -3033,11 +3093,12 @@ static void binder_deferred_release(struct binder_proc *proc)
 	BUG_ON(proc->files);
 
 	hlist_del(&proc->proc_node);
-	if (binder_context_mgr_node && binder_context_mgr_node->proc == proc) {
+	if (proc->binder_ns->context_mgr_node && 
+            proc->binder_ns->context_mgr_node->proc == proc) {
 		binder_debug(BINDER_DEBUG_DEAD_BINDER,
 			     "binder_release: %d context_mgr_node gone\n",
 			     proc->pid);
-		binder_context_mgr_node = NULL;
+		proc->binder_ns->context_mgr_node = NULL;
 	}
 
 	threads = 0;
@@ -3066,7 +3127,8 @@ static void binder_deferred_release(struct binder_proc *proc)
 			node->proc = NULL;
 			node->local_strong_refs = 0;
 			node->local_weak_refs = 0;
-			hlist_add_head(&node->dead_node, &binder_dead_nodes);
+			hlist_add_head(&node->dead_node,
+                                       &proc->binder_ns->dead_nodes);
 
 			hlist_for_each_entry(ref, pos, &node->refs, node_entry) {
 				incoming_refs++;
@@ -3138,6 +3200,7 @@ static void binder_deferred_release(struct binder_proc *proc)
 	}
 
 	put_task_struct(proc->tsk);
+        put_binder_ns(proc->binder_ns);
 
 	binder_debug(BINDER_DEBUG_OPEN_CLOSE,
 		     "binder_release: %d threads %d, nodes %d (ref %d), "
@@ -3516,65 +3579,111 @@ static void print_binder_proc_stats(struct seq_file *m,
 }
 
 
-static int binder_state_show(struct seq_file *m, void *unused)
+static void __binder_state_show(struct dev_ns_info *dev_ns_info, void *data)
 {
 	struct binder_proc *proc;
 	struct hlist_node *pos;
 	struct binder_node *node;
-	int do_lock = !binder_debug_no_lock;
+        struct binder_dev_ns *binder_ns;
+        struct seq_file *m = data;
+        char str[64];
 
-	if (do_lock)
-		mutex_lock(&binder_lock);
+        binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+                                 dev_ns_info);
 
-	seq_puts(m, "binder state:\n");
+        snprintf(str, sizeof(str),
+                 "binder state (0x%p):\n", dev_ns_info->dev_ns);
+	seq_puts(m, str);
 
-	if (!hlist_empty(&binder_dead_nodes))
+	if (!hlist_empty(&binder_ns->dead_nodes))
 		seq_puts(m, "dead nodes:\n");
-	hlist_for_each_entry(node, pos, &binder_dead_nodes, dead_node)
+	hlist_for_each_entry(node, pos, &binder_ns->dead_nodes, dead_node)
 		print_binder_node(m, node);
 
-	hlist_for_each_entry(proc, pos, &binder_procs, proc_node)
+	hlist_for_each_entry(proc, pos, &binder_ns->procs, proc_node)
 		print_binder_proc(m, proc, 1);
-	if (do_lock)
-		mutex_unlock(&binder_lock);
-	return 0;
 }
 
-static int binder_stats_show(struct seq_file *m, void *unused)
+static int binder_state_show(struct seq_file *m, void *unused)
+{
+    int do_lock = !binder_debug_no_lock;
+
+    if (do_lock)
+            mutex_lock(&binder_lock);
+
+    loop_dev_ns_info(binder_ns_id, m, __binder_state_show);
+
+    if (do_lock)
+            mutex_unlock(&binder_lock);
+
+    return 0;
+}
+
+static void __binder_stats_show(struct dev_ns_info *dev_ns_info, void *data)
 {
 	struct binder_proc *proc;
+        struct binder_dev_ns *binder_ns;
+        struct seq_file *m = data;
 	struct hlist_node *pos;
-	int do_lock = !binder_debug_no_lock;
+        char str[64];
 
-	if (do_lock)
-		mutex_lock(&binder_lock);
+        binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+                                 dev_ns_info);
 
-	seq_puts(m, "binder stats:\n");
+        snprintf(str, sizeof(str),
+                 "binder stats (0x%p):\n", dev_ns_info->dev_ns);
+	seq_puts(m, str);
 
 	print_binder_stats(m, "", &binder_stats);
 
-	hlist_for_each_entry(proc, pos, &binder_procs, proc_node)
+	hlist_for_each_entry(proc, pos, &binder_ns->procs, proc_node)
 		print_binder_proc_stats(m, proc);
-	if (do_lock)
-		mutex_unlock(&binder_lock);
-	return 0;
 }
 
-static int binder_transactions_show(struct seq_file *m, void *unused)
+static int binder_stats_show(struct seq_file *m, void *unused)
+{
+        int do_lock = !binder_debug_no_lock;
+
+        if (do_lock)
+                mutex_lock(&binder_lock);
+
+        loop_dev_ns_info(binder_ns_id, m, __binder_stats_show);
+
+        if (do_lock)
+                mutex_unlock(&binder_lock);
+
+        return 0;
+}
+
+static void __binder_transactions_show(struct dev_ns_info *dev_ns_info, void *data)
 {
 	struct binder_proc *proc;
+        struct binder_dev_ns *binder_ns;
+        struct seq_file *m = data;
+        char str[64];
 	struct hlist_node *pos;
-	int do_lock = !binder_debug_no_lock;
-
-	if (do_lock)
-		mutex_lock(&binder_lock);
 
-	seq_puts(m, "binder transactions:\n");
-	hlist_for_each_entry(proc, pos, &binder_procs, proc_node)
+        binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+                                 dev_ns_info);
+        snprintf(str, sizeof(str),
+                 "binder transactions (0x%p):\n", dev_ns_info->dev_ns);
+	hlist_for_each_entry(proc, pos, &binder_ns->procs, proc_node)
 		print_binder_proc(m, proc, 0);
-	if (do_lock)
-		mutex_unlock(&binder_lock);
-	return 0;
+}
+
+static int binder_transactions_show(struct seq_file *m, void *unused)
+{
+        int do_lock = !binder_debug_no_lock;
+
+        if (do_lock)
+                mutex_lock(&binder_lock);
+
+        loop_dev_ns_info(binder_ns_id, m, __binder_transactions_show);
+
+        if (do_lock)
+                mutex_unlock(&binder_lock);
+
+        return 0;
 }
 
 static int binder_proc_show(struct seq_file *m, void *unused)
@@ -3645,6 +3754,8 @@ static int __init binder_init(void)
 	if (!binder_deferred_workqueue)
 		return -ENOMEM;
 
+        ret = DEV_NS_REGISTER(binder, "binder");
+
 	binder_debugfs_dir_entry_root = debugfs_create_dir("binder", NULL);
 	if (binder_debugfs_dir_entry_root)
 		binder_debugfs_dir_entry_proc = debugfs_create_dir("proc",
-- 
2.1.4

